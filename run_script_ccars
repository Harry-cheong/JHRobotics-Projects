#!/usr/bin/env python3
# pyright: reportMissingImports=false

from ev3dev2.motor import OUTPUT_A, OUTPUT_B,OUTPUT_C, OUTPUT_D, MoveTank, MoveSteering, LargeMotor, MediumMotor, SpeedPercent
from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor, UltrasonicSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3, INPUT_4
from ev3dev2.sound import Sound
import time
import threading
from importlib.machinery import SourceFileLoader

Navigation = SourceFileLoader('Navigation', '/home/robot/N_R_C_2_0_2_1/Modules/Navigation').load_module()
Polling = SourceFileLoader('Polling', '/home/robot/N_R_C_2_0_2_1/Modules/Polling').load_module()
Memory = SourceFileLoader('Memory', '/home/robot/N_R_C_2_0_2_1/Modules/Memory').load_module()
Storage = SourceFileLoader('car_storage', '/home/robot/N_R_C_2_0_2_1/Modules/car_storage').load_module()

# Instantiate Brick
leds = Leds()
btn = Button()
spk = Sound()

# Instantiate Sensors
left_ls = ColorSensor(INPUT_2)
right_ls = ColorSensor(INPUT_3)

# Instantiate Motors
lm = LargeMotor(OUTPUT_B)
rm = LargeMotor(OUTPUT_C)

steering = MoveSteering(OUTPUT_B, OUTPUT_C)
tank = MoveTank(OUTPUT_B, OUTPUT_C)

# Threading
m_lock = threading.Lock()

# Min/Max Reflective Value
minRef = 0
maxRef = 50
lls_Ref_black_white = 23
rls_Ref_black_white = 22

# Initialize instances

ctrl = Navigation.Navigate(m_lock, minRef, maxRef, lls_Ref_black_white, rls_Ref_black_white)
mem = Memory.Memory()
store = Storage.Storage(mem, tank)
poll = Polling.Poll(m_lock, minRef, maxRef, ctrl.rm, ctrl.lm, mem, 40.0, 25.0, 18.0, 5.0, False, False, 70, ctrl, store)

left_ls.mode = 'COL-REFLECT'
right_ls.mode = 'COL-REFLECT'

def resetRobot():
    store.reset_storage(30)
    store.storage_motor.on_for_degrees(-100, 90)
    store.extend_retract(100, retract = False)
    store.storage_motor.on_for_degrees(100, 90)

def pauseloop():
    while not btn.up:
        if btn.down:
            resetRobot()
        pass

# Start
leds.set_color('LEFT', 'RED')
leds.set_color('RIGHT', 'RED')
print('Ready')
# while not btn.enter:
#     pass
# leds.all_off()

## Run starts
time_start = time.perf_counter()

# Escape base
tank.on_for_degrees(20, 20, 200)
ctrl.turn(turn_right = True, turn_spd = 13, degrees = 184)

# Align with line to collect first 2 batteries

tank.on(20, 20)
time.sleep(0.8)

while not right_ls.reflected_light_intensity > 35:
    pass
while not right_ls.reflected_light_intensity < 10:
    pass
while not right_ls.reflected_light_intensity > 35:
    pass
tank.off()
ctrl.align(10,2.5,2, black_white = True, correction_spd = 10, pos_beforeline = False, timeout = False)
tank.on_for_degrees(10, 10, 40)

ctrl.turn(turn_right = False, turn_spd = 13, degrees = 184)

store.storage_motor.on_for_degrees(-100, 90)
store.extend_retract(100, extend = False)
store.storage_motor.on_for_degrees(100, 90)

store.align_storage(6, 20)
tank.on_for_degrees(10,10, 60)
ctrl.align(10,2.5,2, black_white = False, correction_spd = 10, pos_beforeline = True, timeout = False)


# Collect 1st car
tank.on_for_degrees(10,10, 160)

# Collect 2nd car
store.align_storage(5, 15, from_mid = False)
tank.on_for_degrees(10,10, 148)


# # Collect 3rd car
store.align_storage(4, 15, from_mid = False)
tank.on_for_degrees(10,10, 148)

# Collect 4th car
store.align_storage(3, 15, from_mid = False)
tank.on_for_degrees(10,10, 148)

# Collect 5th car
store.align_storage(2, 15, from_mid = False)
tank.on_for_degrees(10,10, 148)

pauseloop()
# Collect 6th car
store.align_storage(1, 15, from_mid = False)
tank.on_for_degrees(10,10, 148)

pauseloop()

