#!/usr/bin/env python3
# pyright: reportMissingImports=false
# 
from ev3dev2.motor import OUTPUT_A, OUTPUT_B,OUTPUT_C, OUTPUT_D, MoveTank, MoveSteering, LargeMotor, MediumMotor, SpeedPercent
from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor, UltrasonicSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3, INPUT_4
from ev3dev2.sound import Sound
import time
import threading
from importlib.machinery import SourceFileLoader

Navigation = SourceFileLoader('Navigation', '/home/robot/N_R_C_2_0_2_1/Modules/Navigation').load_module()
Polling = SourceFileLoader('Polling', '/home/robot/N_R_C_2_0_2_1/Modules/Polling').load_module()
Memory = SourceFileLoader('Memory', '/home/robot/N_R_C_2_0_2_1/Modules/Memory').load_module()
Storage = SourceFileLoader('car_storage', '/home/robot/N_R_C_2_0_2_1/Modules/car_storage').load_module()

# Instantiate Brick
leds = Leds()
btn = Button()
spk = Sound()

# Instantiate Sensors
left_ls = ColorSensor(INPUT_2)
right_ls = ColorSensor(INPUT_3)

lls_Ref_betwline = 30
rls_Ref_betwline = 30

# Instantiate Motors
lm = LargeMotor(OUTPUT_B)
rm = LargeMotor(OUTPUT_C)

steering = MoveSteering(OUTPUT_B, OUTPUT_C)
tank = MoveTank(OUTPUT_B, OUTPUT_C)

# Threading
m_lock = threading.Lock()

# Min/Max Reflective Value
minRef = 0
maxRef = 50

# constants
kp = 0.07
kd = 1.05

# Initialize instances
ctrl = Navigation.Navigate(m_lock, minRef, maxRef, lls_betw_line =  lls_Ref_betwline, rls_betw_line = rls_Ref_betwline) 
mem = Memory.Memory()
store = Storage.Storage(mem, tank)
poll = Polling.Poll(m_lock, minRef, maxRef, ctrl.rm, ctrl.lm, mem, 40.0, 25.0, 18.0, 5.0, False, False, 70, ctrl, store)

run_eject = False
run_collect = False

'''

COLLECTING CARS

'''
## Run starts
time_start = time.perf_counter()

# Escape base
tank.on_for_degrees(20, 20, 200)
ctrl.turn(turn_right = True, turn_spd = 15, degrees = 184)

# Align with line to collect first 2 batteries

tank.on(20, 20)
time.sleep(0.8)

while not right_ls.reflected_light_intensity > 35:
    pass
while not right_ls.reflected_light_intensity < 10:
    pass
while not right_ls.reflected_light_intensity > 35:
    pass
tank.off()
ctrl.align(10,2.5,2, black_white = True, correction_spd = 10, pos_beforeline = False, timeout = False)
tank.on_for_degrees(10, 10, 39)
ctrl.turn(turn_right = False, turn_spd = 15, degrees = 184)
store.storage_motor.on_for_degrees(-100, 90)
store.extend_retract(100, extend = False)
store.storage_motor.on_for_degrees(100, 90)

# Collect 1st car
store.align_storage(6, 20)
tank.on_for_degrees(10,10,240)

# # Realign
store.align_storage(5,20, from_mid = False)
tank.on_for_degrees(-10,-10, 120)
ctrl.align(20,2.5,2, black_white = True, correction_spd = 10, pos_beforeline = False, timeout = False)

# Collect 2nd car
tank.on_for_degrees(10,10, 270)
store.align_storage(4, 20)
store.storage_motor.on_for_degrees(-10,15)

# # Collect 3rd car
tank.on_for_degrees(10,10, 100)

tank.on(-20, -20)
while right_ls.reflected_light_intensity > 15:
    pass
tank.off()
ctrl.align(20,2.5,2, black_white = True, correction_spd = 10, pos_beforeline = False, timeout = False)
steering.on_for_degrees(50, 20, 190)

''' 

STARTING RUN ON BOTTOM LANE

'''

# Start
mem.setRow("middle")

if mem.currentRow == "middle":
    ctrl.runpid(kp, 0, kd ,20, right_light_sensor = True, follow_right_edge = True)
else:
    ctrl.runpid(kp, 0, kd, 20, right_light_sensor = False, follow_right_edge = False)
poll.start_inters_poll(right_light_sensor = True)
# poll.start_us_poll()



def resetRobot():
    store.reset_storage(30)
    store.storage_motor.on_for_degrees(-100, 90)
    store.extend_retract(100, retract = False)
    store.storage_motor.on_for_degrees(100, 90)

def pauseloop():
    while not btn.up:
        if btn.down:
            resetRobot()
        pass

restarted = False
turn_at_0inters = False
temp = 0
rerun = False
while True:
    # print(threading.enumerate())
    if poll.turning:
        print('poll.turning ran')
        restarted = False
        poll.inters_stop()
        ctrl.stop_pid()
        if poll.slot_item == "car" and ((poll.pillar_right == True and store.check_vacancy([1, 2, 3, 4])) or (poll.pillar_right == False and store.check_vacancy([3, 4, 5, 6])) or poll.pillar_right == None) and run_collect:
            tank.on_for_degrees(10, 10, 30)
            tank.on(-10, -10)
            while right_ls.reflected_light_intensity > 15:
                pass
            tank.off()
            # pauseloop()
            tank.on_for_degrees(10, 10, 10)
            # pauseloop()
            ctrl.align(10,10,2, black_white = True, correction_spd = 10, pos_beforeline = False, timeout = False)
            # pauseloop()
            pauseloop()
            turning_constant = 385.5
            if poll.turn_right:
                if poll.pillar_right == True:
                    steering.on_for_degrees(-75, 20, turning_constant*3*0.75)
                else:
                    tank.on_for_degrees(10, 10, 150)
                    steering.on_for_degrees(-50, -20, turning_constant)
            else:
                if poll.pillar_right == True:
                    steering.on_for_degrees(100, 20, turning_constant*3*0.75)
                else:
                    tank.on_for_degrees(10, 10, 150)
                    steering.on_for_degrees(75, -20, turning_constant)
            # ctrl.turn(turn_right = poll.turn_right)
            pauseloop()
            # collect car
            '''
            def align(self,
            start_spd,
            maxduration,
            marginoferror,
            target_light_intensity = None,
            black_white = True,
            correction_spd = None,
            pos_beforeline = True,
            timeout = True):
            '''
            
            # def align_storage(self, pos, spd, from_mid = True):
            pauseloop()
            store.align_storage(6, 30)
            pauseloop()
            tank.on_for_degrees(10, 10, 350)
            pauseloop()
            # ctrl.catch_line(20, turn_right = not poll.turn_right)
        if poll.slot_item == "vacant" and run_eject:
            eject_car = False
            print('pillar_right' + str(poll.pillar_right))
            print('inters' + str(poll.intersection))
            if poll.pillar_right == None:
                eject_car = store.find_car(colour=poll.slot_color, left_side = True, right_side = True)
            else:
                eject_car = store.find_car(colour=poll.slot_color, left_side = not poll.pillar_right, right_side = poll.pillar_right)
            print('eject_car' + str(eject_car))
            if eject_car:
                tank.on_for_degrees(10, 10, 50)
                ctrl.turn(turn_right = poll.turn_right)
                tank.on_for_degrees(10, 10, 35)
                store.eject_car(25)
                tank.on_for_degrees(-10, -10, 55)
                pauseloop()
                ctrl.catch_line(20, turn_right = not poll.turn_right)
                pauseloop()
        poll.turn_right  = None
        poll.turning = False
        if poll.invert_memory:
            ctrl.runpid(kp, 0, kd ,20, right_light_sensor = False, follow_right_edge = False, forward=False)
        else:
            ctrl.runpid(kp, 0, kd ,20, right_light_sensor = False, follow_right_edge = False, forward=True)
        time.sleep(1.0)
        poll.start_inters_poll(right_light_sensor = True)
    
    if poll.intersection == 4 and not restarted:
        restarted = True
        print('pid stopped')
        ctrl.stop_pid()
        poll.inters_stop()

        if mem.currentRow == "top":
            poll.invert_memory = True
            mem.currentRow = "top"

            # run_eject = False
            # run_collect = False
        elif mem.currentRow == "middle":
            poll.invert_memory = True
            mem.currentRow = "bottom"


        ctrl.runpid(kp, 0, kd ,20, right_light_sensor = False, follow_right_edge = False, forward=False)
        poll.start_inters_poll(right_light_sensor = True)

    if poll.intersection == 0 and poll.invert_memory and not turn_at_0inters:
        turn_at_0inters = True
        ctrl.stop_pid()
        poll.inters_stop()
        if mem.currentRow == "bottom":
            ctrl.turn(turn_right = False)
            ctrl.runpid(kp, 0, kd ,20, right_light_sensor = True, follow_right_edge = True, forward=True)
            while not btn.left:
                pass
            ctrl.turn(turn_right = True)
            ctrl.runpid(kp, 0, kd ,20, right_light_sensor = False, follow_right_edge = False, forward=True)
            poll.inters_start()
            poll.invert_memory = False
        elif mem.currentRow == "top":
            steering.on_for_degrees(100, 20, 190)
            # harry, take it from here please
    elif poll.intersection > 0:
        turn_at_0inters = False




    if btn.up:
        ctrl.stop_pid()
        poll.inters_stop()
        store.reset_storage(30)
        store.storage_motor.on_for_degrees(-100, 90)
        store.extend_retract(100, retract = False)
        store.storage_motor.on_for_degrees(100, 90)
        break
