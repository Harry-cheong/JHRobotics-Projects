data0 = [9, 8, 7, 8, 7, 6, 9, 7, 2, 8, 9, 8, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 9, 7, 2, 8, 9, 8, 5, 6, 5, 6, 8, 6, 1, 3, 9, 6, 5, 6, 5, 6, 8, 9, 5, 1, 4, 9, 6, 5, 6, 5, 6, 7, 9, 2, 1, 4, 8, 9, 7, 5, 6, 5, 4]

data1 = [9, 8, 9, 8, 7, 8, 9, 4, 1, 2, 8, 9, 8, 6, 3, 4, 5, 4, 5, 6, 9, 5, 1, 6, 9, 8, 6, 5, 6, 5, 6, 5, 6, 5, 8, 4, 1, 3, 7, 9, 8, 5, 6, 5, 6, 8, 9, 2, 1, 3, 8, 9, 8, 6, 5, 6, 7, 9, 6, 1, 2, 8, 9, 7, 6, 5, 6, 5, 6, 5]

data2 = [9, 1, 9, 8, 9, 8, 9, 8, 9, 8, 2, 1, 7, 8, 7, 6, 5, 6, 2, 1, 3, 7, 8, 9, 8, 9, 8, 7, 6, 5, 4, 3, 2, 3, 7, 8, 6, 4, 1, 3, 9, 8, 2, 5, 8, 9, 4, 1, 5, 9, 6, 2, 3, 2, 3, 4, 5, 6, 7, 9, 8, 2, 1, 4, 9, 8, 7, 6, 7, 6, 7]

data3 = [9, 8, 9, 8, 9, 7, 5, 1, 2, 8, 9, 8, 9, 8, 7, 6, 5, 4, 3, 6, 9, 8, 5, 1, 6, 9, 8, 4, 2, 3, 4, 5, 6, 9, 3, 1, 2, 6, 9, 8, 6, 7, 6, 7, 6, 7, 8, 9, 8, 3, 1, 5, 9, 7, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 9, 6, 2, 5, 9, 8, 7, 5, 6, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4]

data4 = [9, 8, 9, 8, 7, 4, 1, 2, 3, 6, 5, 6, 7, 6, 3, 1, 6, 7, 8, 9, 8, 9, 8, 9, 8, 7, 6, 4, 3, 2, 3, 6, 9, 5, 1, 3, 8, 4, 2, 3, 4, 5, 9, 6, 1, 6, 9, 7, 6, 5, 6, 5, 6, 5, 6, 7, 9, 5, 2, 5, 9, 8, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4]

data5 = [8, 7, 8, 9, 8, 9, 2, 1, 8, 9, 6, 5, 4, 5, 4, 5, 4, 5, 6, 7, 9, 2, 1, 2, 7, 9, 7, 6, 5, 6, 5, 6, 5, 6, 9, 8, 2, 1, 4, 9, 7, 6, 8, 9, 2, 1, 5, 9, 8, 5, 6, 5, 7, 9, 7, 1, 3, 8, 9, 8, 5]

data6 = [9, 8, 9, 8, 9, 5, 1, 4, 7, 9, 8, 7, 6, 5, 4, 3, 4, 3, 5, 9, 8, 2, 1, 8, 9, 8, 6, 4, 5, 6, 5, 6, 5, 6, 8, 9, 8, 4, 1, 4, 7, 9, 8, 6, 5, 8, 9, 8, 3, 1, 4, 8, 9, 8, 6, 5, 7, 9, 6, 2, 5, 9, 8, 6, 5]

data7 = [9, 8, 9, 8, 9, 5, 1, 8, 7, 6, 5, 6, 5, 6, 9, 8, 1, 2, 6, 9, 8, 6, 5, 6, 9, 8, 5, 1, 2, 9, 6, 5, 6, 8, 3, 1, 3, 9, 8, 5, 6, 9, 8, 3, 2, 6, 9, 8, 6, 5, 4]

data8 = [6, 5, 4, 5, 8, 9, 7, 1, 5, 9, 7, 5, 4, 5, 4, 5, 8, 9, 8, 2, 1, 7, 9, 6, 5, 6, 5, 6, 7, 6, 8, 4, 1, 8, 9, 7, 6, 7, 8, 9, 6, 1, 3, 9, 7, 6, 7, 8, 7, 8, 7, 8, 7, 8, 9, 5, 2, 8, 9, 6, 5]

data9 = [5, 6, 7, 9, 5, 1, 4, 9, 8, 7, 6, 5, 6, 5, 7, 9, 8, 1, 2, 9, 7, 5, 6, 5, 7, 9, 7, 2, 1, 5, 9, 6, 5, 6, 5, 6, 7, 6, 7, 9, 8, 5, 1, 9, 6, 5, 6, 5, 6, 5, 9, 7, 2, 7, 9, 7, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4]

testdata = [6, 7, 6, 7, 6, 5, 6, 7, 6, 5, 6, 5, 6, 7, 6, 2, 1, 7, 6, 5, 6, 5, 6, 7, 4, 1, 2, 4, 5, 7, 6, 5, 6, 5, 6, 5, 6, 5, 6, 7, 6, 2, 1, 3, 7, 6, 5, 6, 5, 6, 5, 6, 7, 5, 3, 1, 3, 7, 6, 5, 6, 5, 6, 5, 4, 5, 4]

Dataset = [data0,data1, data2, data3, data4, data5, data6, data7, data8, data9]

def freq(Dataset):
    for data in Dataset:
        record = {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}
        for x in data:
            record[x] += 1
        print(record)

def find_inters(data):
    log = []
    imptlog = []
    datalog = []
    cycle = 0
    intersection = 0 

    for x in data:
        log.append(x)
        
        if len(imptlog)>1:
            grad = abs(x-imptlog[-1])
            if grad > 2:
                imptlog.append(x)
                if imptlog[-2] <= 3 and imptlog[-1]-imptlog[-2]>2:
                    intersection += 1
                    datalog.append([imptlog[-2],imptlog[-1]])
                    imptlog = []
        else:
            imptlog.append(x)
    return intersection,datalog

def avg(Dataset):
    score = 0
    record = []
    for x in Dataset:
        result = find_inters(x)
        record.append(result[0])
        score += abs(5-int(result[0]))
        if abs(5-int(result[0])) != 0:
            print(Dataset.index(x),result[1])
    print(f'{record} {score}') 

avg(Dataset)

# result = find_inters(testdata)
# print(result[1])
# print(result[0])

# freq(Dataset) 

# Test Results
'''
1 [[1, 8], [3, 6], [1, 6], [1, 7], [2, 8], [1, 8]]
2 [[1, 9], [2, 7], [2, 7], [3, 7], [1, 9], [2, 5], [1, 5], [2, 5], [2, 9]]
4 [[1, 6], [3, 6], [1, 8], [2, 5], [1, 6], [2, 5]]
6 [[1, 4], [3, 9], [2, 8], [1, 4], [3, 8], [2, 5]]
[5, 6, 9, 5, 6, 5, 6, 5, 5, 5] 7
'''
