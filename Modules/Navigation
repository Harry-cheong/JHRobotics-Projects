#!/usr/bin/env python3
# pyright: reportMissingImports=false

from ev3dev2.motor import OUTPUT_B, OUTPUT_C, MoveTank, MoveSteering, LargeMotor, SpeedPercent
from ev3dev2.sensor.lego import ColorSensor
from ev3dev2.sensor import INPUT_2, INPUT_3
from ev3dev2.led import Leds
from ev3dev2.button import Button
import time
import threading

class Navigate:
    
    def __init__(self, m_lock, minRef, maxRef, lls_betw_line =  None, rls_betw_line = None):
        
        # Motors
        self.lm = LargeMotor(OUTPUT_B)
        self.rm = LargeMotor(OUTPUT_C)

        self.steering = MoveSteering(OUTPUT_B, OUTPUT_C)
        self.movetank = MoveTank(OUTPUT_B, OUTPUT_C)

        # Sensors
        self.lls = ColorSensor(INPUT_2)
        self.rls = ColorSensor(INPUT_3)
 
        # Constants
        self.minRef = minRef
        self.maxRef = maxRef

        self.lls_target = lls_betw_line
        self.rls_target = rls_betw_line
        
        # Threading
        self.pid = threading.Event()
        self.mlock = m_lock

       
        
    def pid_follow(self,
                    kp,
                    ki,
                    kd,
                    speed,
                    pid_run = True,
                    target_light_intensity = None,
                    follow_right_edge = True,
                    right_light_sensor = True,
                    forward = True):    
        
        if right_light_sensor:
            # For PID 
            ls = self.rls
            if target_light_intensity is None:
                if self.rls_target is None:
                    raise ValueError('Missing Light Value')
                else:
                    target_light_intensity = (100 * (self.rls_target - self.minRef ) / ( self.maxRef - self.minRef))
           
        else: 
            # For PID 
            ls = self.lls
            if target_light_intensity is None:
                if self.lls_target is None:
                    raise ValueError('Missing Light Value')
                else:
                    target_light_intensity = (100 * (self.lls_target - self.minRef ) / ( self.maxRef - self.minRef))
        
        ls.mode = 'COL-REFLECT'

        if follow_right_edge: 
            polarity = 1
        else: 
            polarity = -1 
        
        last_error = error = integral = 0.0
        derivative = 0.0
        cycle = 0

        if not forward:
            speed *= -1
            polarity *= -1

        while pid_run.is_set():
            
            reflected_light_intensity = (100 * ( ls.reflected_light_intensity - self.minRef ) / ( self.maxRef - self.minRef))
            error = target_light_intensity - reflected_light_intensity

            if error == 0:
                integral = 0
            else:
                integral = integral + error
            
            if not cycle == 0:
                derivative = error - last_error
            last_error = error

            steering = (kp * error) + (ki * integral) + (kd * derivative)
            steering *= polarity
            
            
            self.steering.on(steering, SpeedPercent(speed))
            cycle += 1

            # print('cycle:{c}, ref:{ref}, error:{err}, steering:{steer} '.format(c = cycle, ref = reflected_light_intensity, steer = steering, err = error))
        
        self.movetank.off()

    def align(self,
            start_spd,
            maxduration,
            marginoferror,
            target_light_intensity = None,
            black_white = True,
            correction_spd = None,
            pos_beforeline = True,
            timeout = True):

        self.rls.mode = 'COL-REFLECT'
        self.lls.mode = 'COL-REFLECT'

        if pos_beforeline:
            polarity = 1
        else:
            polarity = -1
        
        rls_target_light_intensity = 0
        lls_target_light_intensity = 0

        if target_light_intensity is not None:
            rls_target_light_intensity = target_light_intensity
            lls_target_light_intensity = target_light_intensity 
        else:
            if self.rls_target is None or self.lls_target is None:
                raise ValueError('Missing Light value')
            else:
                rls_target_light_intensity = self.rls_target
                lls_target_light_intensity = self.lls_target
        
        rls_target_black = rls_target_light_intensity - marginoferror
        rls_target_white = rls_target_light_intensity + marginoferror

        lls_target_black = lls_target_light_intensity - marginoferror
        lls_target_white = lls_target_light_intensity + marginoferror

        if correction_spd is None:
            correction_spd = start_spd
        
        start_spd = SpeedPercent(start_spd*polarity)
        
        forward_spd = SpeedPercent(-correction_spd*polarity)
        backward_spd = SpeedPercent(correction_spd*polarity)

        # Coarse Adjustment
        
        Leds().set_color('LEFT', 'RED')
        Leds().set_color('RIGHT', 'RED')
        
        while True:
            self.movetank.on(start_spd,start_spd)

            if black_white:

                # Aligning towards black Line 

                if self.lls.reflected_light_intensity <= lls_target_light_intensity:
                    self.lm.off()
                    while not self.rls.reflected_light_intensity <= rls_target_light_intensity:
                        self.rm.on(start_spd)
                        # print(self.rls.reflected_light_intensity)
                    self.rm.off()
                    break
            
                else:
                    if self.rls.reflected_light_intensity <= rls_target_light_intensity:
                        self.rm.off()
                        while not self.lls.reflected_light_intensity <= lls_target_light_intensity:
                            self.lm.on(start_spd)
                            # print(self.lls.reflected_light_intensity)
                        self.lm.off()
                        break
                    else:
                        pass
            
            else:

                # Aligning towards White Line

                if self.lls.reflected_light_intensity >= lls_target_light_intensity:
                    self.lm.off()
                    while not self.rls.reflected_light_intensity >= rls_target_light_intensity:
                        self.rm.on(start_spd)
                        # print(self.rls.reflected_light_intensity)
                    self.rm.off()
                    break
            
                else:
                    if self.rls.reflected_light_intensity >= rls_target_light_intensity:
                        self.rm.off()
                        while not self.lls.reflected_light_intensity >= lls_target_light_intensity:
                            self.lm.on(start_spd)
                            # print(self.lls.reflected_light_intensity)
                        self.lm.off()
                        break
                    else:
                        pass

        # Fine Adjustment
        start = time.perf_counter()
        end = time.perf_counter()

        Leds().set_color('LEFT', 'AMBER')
        Leds().set_color('RIGHT', 'AMBER')

        while not (end - start) > maxduration:

            if self.lls.reflected_light_intensity < lls_target_light_intensity:
                self.lm.on(forward_spd)
            else:
                if self.lls.reflected_light_intensity > lls_target_light_intensity:
                    self.lm.on(backward_spd)
                
                else:
                    self.lm.off()
            
            if self.rls.reflected_light_intensity < rls_target_light_intensity:
                self.rm.on(forward_spd)
            else:
                if self.rls.reflected_light_intensity > rls_target_light_intensity:
                    self.rm.on(backward_spd)
                
                else:
                    self.rm.off()
            
            if lls_target_black < self.lls.reflected_light_intensity < lls_target_white and rls_target_black < self.rls.reflected_light_intensity < rls_target_white:
                break
            
            if timeout:
                end = time.perf_counter()
            else:
                end = start
        
        self.rm.off()
        self.lm.off()

        # print(self.lls.reflected_light_intensity)
        # print(self.rls.reflected_light_intensity)

        Leds().set_color('LEFT', 'GREEN')
        Leds().set_color('RIGHT', 'GREEN')

        Leds().all_off()

    def runpid(self,
                kp, 
                ki,
                kd,
                speed, 
                Daemon = None,
                target_light_intensity = None, 
                follow_right_edge = True, 
                right_light_sensor = True,
                forward = True):

        self.intersection = False
        k = False
        try:
            k = self._pid.is_alive()
        except:
            k = False
        while k:
            continue
        self.pid.set()
        self._pid = threading.Thread(target = self.pid_follow, args = (kp,ki,kd,speed), kwargs = {'target_light_intensity' : target_light_intensity, 'follow_right_edge' : follow_right_edge, 'right_light_sensor' : right_light_sensor, 'pid_run' : self.pid, 'forward':forward}, daemon = Daemon, name="pid")
        self._pid.start()
    
    def turn(self, turn_spd = 20, degrees = 185, turn_right = None):
        assert turn_right is not None

        if turn_right:
            self.steering.on_for_degrees(100, turn_spd, degrees)
        else:
            self.steering.on_for_degrees(-100, turn_spd, degrees)
    def catch_line(self,turn_spd, turn_right = None):

        assert turn_right is not None
        if turn_right:
            self.steering.on_for_degrees(100, turn_spd, 200)
            print(self.lls.reflected_light_intensity)

            while not abs(self.lls.reflected_light_intensity - self.lls_target) == 2:
                if self.lls.reflected_light_intensity > self.lls_target:
                    self.rm.off()
                    self.lm.on(-10)
                    continue 
                if self.lls.reflected_light_intensity < self.lls_target:
                    self.lm.off()
                    self.rm.on(-10)
                    continue
            self.lm.off()
            self.rm.off()
            self.movetank.on_for_degrees(10,10,20)
        else:
            self.steering.on_for_degrees(-100, turn_spd, 200)
    def stop_pid(self):
        self.pid.clear()
        self._pid.join()