#!/usr/bin/env python3
# pyright: reportMissingImports=false

from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3
from ev3dev2.motor import MediumMotor,OUTPUT_A, OUTPUT_D, SpeedPercent # A is storage moving, D is pusher
import time
import threading

btn = Button()
leds = Leds()

class Storage:
    def __init__(self, memory, tank):
        
        # Data Storage
        self.cars = {
                    'red' : 1, 
                    'blue' : 0, 
                    'green' : 0,
                    }
        
        # TODO: need to change back to default
        self.pos_cars = {
                        1 : [], 
                        2 : [], 
                        3 : ['red'],
                        4 : [],
                        5 : [],
                        6 : [],
                        }
        self.pos_vacant = [2, 3, 4, 5, 6] # TODO: need to change back to default
        self.pos_poi = None
        self.pos_battery = [1,3,4,6]
        self.pos_alignedto = None

        # Motors
        self.storage_motor = MediumMotor(OUTPUT_A)
        self.pusher_motor = MediumMotor(OUTPUT_D)
        self.tank = tank

        # Sensors
        self.ls = ColorSensor(INPUT_1)

        # Modules
        self.memory = memory

    def check_vacancy(self, pos_arr):
        vacant = False
        for i in pos_arr:
            if i in self.pos_vacant:
                vacant = True
                break
        return vacant

    def find_car(self,colour = None,left_side = True, right_side = True, type_rechargeable = False):
        
        pos_to_check = []
        pos_poi = []

        if colour is None:
            colour = self.memory.parking_lot_data[self.memory.currentRow][self.memory.currentCol]['color']

        if left_side:
            pos_to_check = [1, 2, 3, 4]
        
        if right_side:
            pos_to_check = [3, 4, 5, 6]

        if left_side and right_side:
            pos_to_check = [1, 2, 3, 4, 5, 6]


        if type_rechargeable and colour == 'green':
            for x in pos_to_check:
                if self.pos_cars[x] == ['green', True]:
                    pos_poi.append(x)
            
            if len(pos_poi) > 0:
                    self.pos_poi = pos_poi
                    return True
            else:
                return False

        elif type_rechargeable and colour == 'blue':
            for x in pos_to_check:
                if self.pos_cars[x] == ['blue', True]:
                    pos_poi.append(x)
            
            if len(pos_poi) > 0:
                    self.pos_poi = pos_poi
                    return True
            else:
                return False
        
        else:

            if colour == 'red':
                if self.cars['red'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['red']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False

            elif colour == 'green':
                if self.cars['green'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['green']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False


            elif colour == 'blue':
                if self.cars['blue'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['blue']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False
        
            else:
                raise ValueError('Invalid Car Colour')
       
    def eject_car(self,slider_spd ,pusher_spd = 100):
        
        proximity = []

        if len(self.pos_poi) == 1:
            self.align_storage(self.pos_poi[0], slider_spd)

            self.extend_retract(pusher_spd)

            self.reset_storage(100)

        
        elif len(self.pos_poi) > 1:
            for x in self.pos_poi:
                if x > 3:
                    proximity.append(x - 4)
                else:
                    proximity.append(3 - x)

            self.align_storage(self.pos_poi[proximity.index(min(proximity))], slider_spd)
            # Warning if the proximity is the same, this will throw an error. However, the chances of that happening is very low. 
            
            self.extend_retract(pusher_spd)

            self.reset_storage(100)
                
        else:
            raise AttributeError('Invalid pos')
        
        self.pos_poi = []

    def align_storage(self, pos, spd, from_mid = True):

        if pos <= 3: 
            polarity = -1
            proximity = 4 - pos
        elif pos <= 6: 
            polarity = 1
            proximity = pos - 3
        else: raise ValueError('Invalid pos')

        if self.pos_alignedto is None: pass
        else: 
            if self.pos_alignedto == pos:
                return 
            else:
                if from_mid:
                    self.reset_storage(spd)
                else:
                    if self.pos_alignedto > pos:
                        proximity = abs(self.pos_alignedto - pos) + 1
                        polarity = -1
                    elif self.pos_alignedto < pos:
                        proximity = abs(pos - self.pos_alignedto)
                        polarity = 1
        self.storage_motor.on(SpeedPercent(spd*polarity))
        deg = self.ls_observe(proximity)

        if pos == 1 or pos == 6:
            deg = round(deg/2, 1)
        else:
            deg = round(deg/3*2, 1)

        self.storage_motor.on_for_degrees(SpeedPercent(spd*polarity*-1), deg)

        self.pos_alignedto = pos
        
    def reset_storage(self, reset_spd):

        if self.pos_alignedto <= 3: polarity = 1
        elif self.pos_alignedto <= 6: polarity = -1
        else: raise AttributeError('Unspecified current pos')

        self.storage_motor.on(SpeedPercent(reset_spd*polarity))
        deg = self.ls_observe(0,align_to_mid = True)
        deg = round(deg/3*2, 1)
        self.storage_motor.on_for_degrees(SpeedPercent(reset_spd*polarity*-1), deg)

        self.pos_alignedto = None

    def store_car(self,colour = None, type_rechargeable = False):
        if not type_rechargeable:
            if self.pos_alignedto is not None:
                self.reset_storage(50)

        if len(self.pos_vacant) == 6:
            start_pos = 6
            num_loop = 6
        else:
            num_loop = 1
            

        for n in range(1, num_loop + 1):
            if n == 1:
                self.align_storage(start_pos, 50)
            
            self.tank.on(10,10)
            

            
        # Integration with polling Module 
        # - If a car is detected to be in the parking lot, the car is a rechargeable car and actions taken accordingly 
        # how to store the cars in the storage need to be worked out 
        # Update self.pos_vacant, self.cars, self.pos_cars

    def identify_car_colour(self):
        pass
        
        # LS to detect the colour of the incoming car
    
    def extend_retract(self, motor_spd, extend = True, retract = True):
        
        if extend: 
            self.pusher_motor.on_for_degrees(SpeedPercent(-motor_spd), 1800)
            
            self.pusher_motor.off()

        if retract:
            self.pusher_motor.on_for_degrees(SpeedPercent(motor_spd), 1800)    

            self.pusher_motor.off()


    def ls_observe(self, num_white_tiles, align_to_mid = False):
        
        self.storage_motor.position = 0

        ls_data = []
        align_data = []

        p_color = None
        white_count = 0

        while True:
            x = self.ls.color_name
            if x != p_color:
                ls_data.append(x)
                p_color = x
                
                if not align_to_mid:
                    if x == 'White':
                        white_count += 1
                        align_data.append([self.storage_motor.position, x])
                        if white_count == num_white_tiles:
                            self.storage_motor.off()
                            break
        
                    elif x == 'Yellow':
                        align_data.append([self.storage_motor.position, x])
                    
                    elif len(ls_data) > 1: 
                            if ls_data[-2] == 'White' or ls_data[-2] == 'Yellow':
                                align_data.append([self.storage_motor.position, ls_data[-2]])

                if align_to_mid:
                    if x == 'Yellow':
                        align_data.append([self.storage_motor.position, x])
                    elif len(ls_data) > 1 and ls_data[-2] == 'Yellow':
                            align_data.append([self.storage_motor.position, ls_data[-2]])
                            self.storage_motor.off()
                            break

        return abs(align_data[-1][0]) - abs(align_data[-2][0]) 
        
    
    def runalign(self,pos, spd, from_mid = True):
        self._align = threading.Thread(target = self.align_storage, args = (pos,spd,), kwargs = {'from_mid' : from_mid})
        self._align.start()

    def run_pusher(self,motor_spd, extend = True, retract = True):
        self._push = threading.Thread(target = self.extend_retract, args = (motor_spd,), kwargs = {'extend':extend, 'retract':retract})
        self._push.start()
    