#!/usr/bin/env python3
# pyright: reportMissingImports=false

from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3
from ev3dev2.motor import MediumMotor ,OUTPUT_A, OUTPUT_D, SpeedPercent # A is storage moving, D is pusher
import time

btn = Button()
leds = Leds()

class Storage:
    def __init__(self, memory):
        
        # Data Storage
        self.cars = {
                    'red' : 0, 
                    'blue' : 0, 
                    'green' : 0,
                    }
        
        self.pos_cars = {
                        1 : [], 
                        2 : [], 
                        3 : [],
                        4 : [],
                        5 : [],
                        6 : [],
                        }
        self.pos_vacant = [1, 2, 3, 4, 5, 6]
        self.pos_poi = None
        self.pos_battery = [1,3,4,6]
        self.pos_alignedto = None

        # Motors
        self.storage_motor = MediumMotor(OUTPUT_A)
        self.pusher_motor = MediumMotor(OUTPUT_D)

        # Sensors
        self.ls = ColorSensor(INPUT_1)

        # Modules
        self.memory = memory

    def check_vacancy(self, pos_arr):
        vacant = False
        for i in pos_arr:
            if i in self.pos_vacant:
                vacant = True
                break
        return vacant

    def find_car(self,colour = None,left_side = True, right_side = True, type_rechargeable = False):
        
        self.memory.current
        pos_to_check = []
        pos_poi = []

        if colour is None:
            colour = self.memory.parking_lot_data[self.memory.currentRow][self.memory.currentCol]['color']

        if left_side:
            pos_to_check = [1, 2, 3, 4]
        
        if right_side:
            pos_to_check = [3, 4, 5, 6]

        if left_side and right_side:
            pos_to_check = [1, 2, 3, 4, 5, 6]


        if type_rechargeable and colour == 'green':
            for x in pos_to_check:
                if self.pos_cars[x] == ['green', True]:
                    pos_poi.append(x)
            
            if len(pos_poi) > 0:
                    self.pos_poi = pos_poi
                    return True
            else:
                return False

        elif type_rechargeable and colour == 'green':
            for x in pos_to_check:
                if self.pos_cars[x] == ['blue', True]:
                    pos_poi.append(x)
            
            if len(pos_poi) > 0:
                    self.pos_poi = pos_poi
                    return True
            else:
                return False
        
        else:

            if colour == 'red':
                if self.cars['red'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['red']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False

            elif colour == 'green':
                if self.cars['green'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['green']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False


            elif colour == 'blue':
                if self.cars['blue'] != 0: 
                    for x in pos_to_check:
                        if self.pos_cars[x] == ['blue']:
                            pos_poi.append(x)
                    
                    if len(pos_poi) > 0:
                        self.pos_poi = pos_poi
                        return True
                    else:
                        return False
                else:
                    return False
        
            else:
                raise ValueError('Invalid Car Colour')
       
    def eject_car(self, motor_spd):
        
        proximity = []

        if len(self.pos_poi) == 1:
            self.align_storage(self.pos_poi[0])

            self.pusher_motor.on(SpeedPercent(motor_spd))
            while not self.pusher_motor.is_stalled:
                pass
            self.pusher_motor.off()

            self.pusher_motor.on(SpeedPercent(-motor_spd))
            time.sleep(0.1)
            while not self.pusher_motor.is_stalled:
                pass
            self.pusher_motor.on()

            self.reset_storage()

        
        elif len(self.pos_poi) > 1:
            for x in self.pos_poi:
                if x > 3:
                    proximity.append(x - 4)
                else:
                    proximity.append(3 - x)
            self.align_storage(self.pos_poi[proximity.index(min(proximity))])
            # Warning if the proximity is the same, this will throw an error. However, the chances of that happening is very low. 
            
            self.pusher_motor.on(SpeedPercent(motor_spd))
            while not self.pusher_motor.is_stalled:
                pass
            self.pusher_motor.off()

            self.pusher_motor.on(SpeedPercent(-motor_spd))
            time.sleep(0.1)
            while not self.pusher_motor.is_stalled:
                pass
            self.pusher_motor.on()

            self.reset_storage()
                
        else:
            raise AttributeError('No valid pos')
        
        self.pos_poi = []

    def align_storage(self, pos):
        
        # align the storage to the specified pos
        # Motor & sensor coordination to align storage to the right position
        # Include pos 1, 2, 3, 4, 5, 6 
        
        # Set the pos after function ends to the pos specified for reset_storage to take over afterwards
        self.pos_alignedto = pos 
        
    def reset_storage(self, current_pos = None, default = True):
        if current_pos is None:
            current_pos = self.pos_alignedto
        
        # reset the storage system to mid pos
        # work to be done to include motor movement

        self.pos_alignedto = None

    def store_car(self,colour = None, type_rechargeable = False):
        if colour is None:
            colour = self.identify_car_colour()

        # Integration with polling Module 
        # - If a car is detected to be in the parking lot, the car is a rechargeable car and actions taken accordingly 
        # how to store the cars in the storage need to be worked out 
        # Update self.pos_vacant, self.cars, self.pos_cars

    def identify_car_colour(self):
        pass
        
        # LS to detect the colour of the incoming car

    