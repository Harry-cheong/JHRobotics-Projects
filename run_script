#!/usr/bin/env python3
# pyright: reportMissingImports=false

from ev3dev2.motor import OUTPUT_A, OUTPUT_B,OUTPUT_C, OUTPUT_D, MoveTank, MoveSteering, LargeMotor, MediumMotor, SpeedPercent
from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor, UltrasonicSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3, INPUT_4
from ev3dev2.sound import Sound
import time
import threading
from importlib.machinery import SourceFileLoader

Navigation = SourceFileLoader('Navigation', '/home/robot/Nrc2021/Modules/Navigation').load_module()
Memory = SourceFileLoader('Memory', '/home/robot/Nrc2021/Modules/Memory').load_module()
Polling = SourceFileLoader('Polling', '/home/robot/Nrc2021/Modules/Polling').load_module()
Storage = SourceFileLoader('car_storage', '/home/robot/Nrc2021/Modules/car_storage').load_module()

# Instantiate Brick
leds = Leds()
btn = Button()
spk = Sound()

# Instantiate Sensors
left_ls = ColorSensor(INPUT_2)
right_ls = ColorSensor(INPUT_3)

# Instantiate Motors
lm = LargeMotor(OUTPUT_B)
rm = LargeMotor(OUTPUT_C)

steering = MoveSteering(OUTPUT_B, OUTPUT_C)
tank = MoveTank(OUTPUT_B, OUTPUT_C)

# Threading
m_lock = threading.Lock()

# Min/Max Reflective Value
minRef = 0
maxRef = 50
lls_Ref_black_white = 23
rls_Ref_black_white = 22

# Initialize instances

ctrl = Navigation.Navigate(m_lock, minRef, maxRef, lls_Ref_black_white, rls_Ref_black_white)
mem = Memory.Memory()
store = Storage.Storage(mem, tank)
poll = Polling.Poll(m_lock, minRef, maxRef, ctrl.rm, ctrl.lm, mem, 40.0, 25.0, 18.0, 5.0, False, False, 70, ctrl)

left_ls.mode = 'COL-REFLECT'
right_ls.mode = 'COL-REFLECT'


# Start
leds.set_color('LEFT', 'RED')
leds.set_color('RIGHT', 'RED')
print('Ready')
# while not btn.enter:
#     pass
# leds.all_off()

## Run starts
time_start = time.perf_counter()

# Escape base
tank.on_for_degrees(20, 20, 323)
ctrl.turn(turn_right = True, turn_spd = 15, degrees = 200)

# Align with line to collect first 2 batteries
tank.on(20, 20)
time.sleep(0.8)
tank.off()

ctrl.runpid(0.18, 0, 1 ,15, right_light_sensor = False, follow_right_edge = True)  
while not right_ls.reflected_light_intensity > 35:
    pass

ctrl.stop_pid()

tank.on_for_degrees(-10, -10, 53)


# Turn and collect first 2 batteries
ctrl.turn(turn_right = True, turn_spd = 15, degrees = 199)
tank.on(-20, -20)
while not left_ls.reflected_light_intensity > 40:
    pass
tank.off()
ctrl.align(20,2,2, black_white = True, correction_spd = 10, pos_beforeline = False)


store.run_pusher(100, extend = False)
store.align_storage(3,30)
store.storage_motor.on_for_degrees(50, 120)

tank.on_for_degrees(10,10, 245) 

# store.storage_motor.on_for_degrees(-30,120)
# store.align_storage(2,30, from_mid = False)

while not btn.up:
    pass
store.reset_storage(30)
while not btn.up:
    pass

tank.on_for_degrees(-20,-20, 160)
ctrl.turn(turn_right = False, turn_spd = 20, degrees = 200)


# Align to collect next 2 batteries
ctrl.runpid(0.18, 0, 1 ,15, right_light_sensor = False, follow_right_edge = False)

poll.start_inters_poll(right_light_sensor = True, object_detection = False)

while True:
    if poll.intersection == 1: 
        break 
poll.inters_stop()
time.sleep(0.15)
ctrl.stop_pid()
poll.intersection = 0
ctrl.runpid(0.18, 0, 1 ,15, right_light_sensor = False, follow_right_edge = False, forward = False)

while not right_ls.reflected_light_intensity < 10:
        pass
ctrl.stop_pid()
tank.on_for_degrees(20, 20, 110)

# Collect next 2 batteries
ctrl.turn(turn_right = True)
tank.on(-15, -15)
time.sleep(0.2)

while not right_ls.reflected_light_intensity < 10:
    pass 
while not right_ls.reflected_light_intensity > 40:
    pass
tank.off()

ctrl.align(15,2,3, black_white = True, correction_spd = 10, pos_beforeline = True)


store.align_storage(6, 30, from_mid = False)
store.storage_motor.on_for_degrees(-100,120)

store.storage_motor.on_for_degrees(100,120)

tank.on_for_degrees(20,20, 250)

store.reset_storage(50)

tank.on_for_degrees(-20,-20, 40)
tank.off()

# Align to collect row of cars

ctrl.turn(turn_right = False)

tank.on(-15,-15)
time.sleep(0.3)
while not left_ls.reflected_light_intensity > 40:
    pass
while not left_ls.reflected_light_intensity < 10:
    pass
tank.off()

tank.on(10,10)
while not left_ls.reflected_light_intensity > 40:
    pass
tank.on_for_degrees(10,10, 18)

ctrl.turn(turn_right = False)

ctrl.align(20,2,3, black_white = True, correction_spd = 10, pos_beforeline = True, target_light_intensity = 20)

# Collect all the car
while not btn.up:
    pass
tank.on_for_degrees(15, 15, 900)

# Align back to the line
tank.on_for_degrees(-30, -30, 850)
ctrl.turn(turn_right = True, turn_spd = 20, degrees = 200)

# Car Parking

# Caculate duration of run
time_end = time.perf_counter()
diff = round(time_end - time_start, 1)
print(diff)

