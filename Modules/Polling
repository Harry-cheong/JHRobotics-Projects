#!/usr/bin/env python3
# pyright: reportMissingImports=false
import threading
from ev3dev2.sensor.lego import ColorSensor, UltrasonicSensor
from ev3dev2.motor import LargeMotor,OUTPUT_B, OUTPUT_C
from ev3dev2.sound import Sound
from ev3dev2.sensor import INPUT_2, INPUT_3, INPUT_4
import time
from importlib.machinery import SourceFileLoader

class Poll:
    def __init__(self,m_lock, minRef, maxRef, rm, lm, memory, us_deviation_diff, us_obstacle_max_dist, us_clear_min_dist, us_min_deviation, on_short_side, invert_memory, constant_rot_differentiation, nav_instance):
        ''' DATA COLLECTION '''
        #Sensors 
        self.lls = ColorSensor(INPUT_2)
        self.rls = ColorSensor(INPUT_3)

        self.us = UltrasonicSensor(INPUT_4)
        self.lm = LargeMotor(OUTPUT_B)
        self.rm = LargeMotor(OUTPUT_C)

        self.minRef = minRef
        self.maxRef = maxRef
        
        #Lock
        self.mlock = m_lock 
        
        #Threading - Event
        self.inters_evt = threading.Event()
        self.us_evt = threading.Event()
        self.object_evt = threading.Event()

        # Threading - Thread
        self._us = threading.Thread()
        self._inters = threading.Thread()
        self._object = threading.Thread()

        # Obstacle detection
        self.us_deviation_diff = us_deviation_diff
        self.us_obstacle_max_dist = us_obstacle_max_dist
        self.us_clear_min_dist = us_clear_min_dist
        self.on_short_side = on_short_side
        self.us_min_deviation = us_min_deviation
        self.invert_memory = invert_memory

        # Logging
        self.ls_log = []
        
        self.intersection_log = []
        self.intersection = 0

        self.us_log = []
        self.us_deviation_log = [0]
        self.us_log_combined = []

        self.us_obstacles = []

        ''' OBSTACLE TYPE DETECTION '''
        # log obstacles
        self.obstacles = []

        # global variables
        self.at_obstacle = False
        self.at_intersection = False

        # local reset variables
        self.crosses_intersection = False
        self.start_rot_l = 0
        self.start_rot_r = 0

        # motors
        self.rm = rm
        self.lm = lm

        # constants
        self.constant_rot_differentiation = constant_rot_differentiation

        self.memory = memory
        self.nav_instance = nav_instance

        self.turning = False
        self.turn_right = None


    ''' DATA COLLECTION '''
    
    def inters_poll(self, right_light_sensor, poll_run = True):
        
        if right_light_sensor:
            ls = self.rls       
        else: 
            ls = self.lls
        
        ls.mode = 'COL-REFLECT'
        p_int = None
        self.ls_log = []
        log = []
        grad = 0
        ofvalue = []
        datalog = []
        imptlog = []

        while poll_run.is_set():
            
            reflected_light_intensity = (100 * ( ls.reflected_light_intensity - self.minRef ) / ( self.maxRef - self.minRef))
            
            _int = int(str(reflected_light_intensity)[:1])

            if _int != p_int:
                ofvalue.append(_int)

                if len(imptlog)>1:
                    grad = abs(_int-imptlog[-1])
                    if grad > 2:
                        imptlog.append(_int)
                        if imptlog[-2] <= 3 and imptlog[-1]-imptlog[-2]>2:
                            self.intersection += 1
                            print('intersection')
                            if self.invert_memory:
                                self.memory.changeCol(-1)
                            else:
                                self.memory.changeCol(1)
                            if self.memory.get()[self.memory.currentRow][self.memory.currentCol]['item'] == '':
                                self.memory.set(self.memory.currentRow, self.memory.currentCol, 'none', False)
                            if not self.at_obstacle:
                                print(self.memory.get()['middle'][self.intersection])
                                self.nav_instance.stop_pid()
                                self.turning = True
                                self.turn_right = False
                                '''
                                # self.us_stop_poll()
                                # self.inters_stop()
                                time.sleep(1.0)
                                self.nav_instance.runpid(0.1, 0, 1.1 ,30, right_light_sensor = False, follow_right_edge = False)
                                # self.start_inters_poll(right_light_sensor = False)
                                # self.start_us_poll()
                                '''
                                datalog.append([imptlog[-2],imptlog[-1]])
                            '''
                            self.at_intersection = True
                            time.sleep(0.3)
                            self.at_intersection = False
                            imptlog = []
                            time.sleep(0.3)
                            '''
                else:
                    imptlog.append(_int)
                
                p_int = _int
        print('intersections ' + str(self.intersection))
            

    
    def start_inters_poll(self, right_light_sensor = False):
        k = False
        try:
            k = self._inters.is_alive()
        except:
            k = False
        while k:
            continue
        self.inters_evt.set()
        self._inters = threading.Thread(target = self.inters_poll, kwargs = {'right_light_sensor': right_light_sensor,'poll_run': self.inters_evt}, name="inters_poll")
        self._inters.start()

    def inters_stop(self):
        self.inters_evt.clear()
        self._inters.join()
        
    def clear_log(self):
        self.ls_log = []
        self.intersection_log = [] 
        self.intersection = 0

