#!/usr/bin/env python3
# pyright: reportMissingImports=false
import time
import threading

class Memory:
    
    def __init__(self, currentRow = 'middle', currentCol = 0):
        self.parking_lot_data = {
            'top': {
                1: {
                    'color': 'red',
                    'item':  'vacant'
                },

                2: {
                    'color': 'red',
                    'item':  'vacant'
                },

                3: {
                    'color': 'green',
                    'item':  'wall'
                },

                4: {
                    'color': 'blue',
                    'item':  'vacant'
                }
            },
            'middle': {
                1: {
                    'color': 'green',
                    'item':  'vacant'
                },

                2: {
                    'color': 'red',
                    'item':  'vacant'
                },

                3: {
                    'color': 'green',
                    'item':  'car'
                },

                4: {
                    'color': 'blue',
                    'item':  'vacant'
                }
            },
            'bottom': {
                1: {
                    'color': 'blue',
                    'item':  'vacant'
                },

                2: {
                    'color': 'blue',
                    'item':  'car'
                },

                3: {
                    'color': 'red',
                    'item':  'wall'
                },

                4: {
                    'color': 'green',
                    'item':  'car'
                }
            }
        }

        self.pillar_data = {
            'top': {
                1: True,
                3: False
            },
            'middle': {
                0: False,
                2: True
            },
            'bottom': {
                1: True,
                4: False 
            }
        }

        self.currentRow = currentRow
        self.currentCol = currentCol


    def set(self, row, col, item, returnData = False):
        # row can be 'top', 'middle', or 'bottom'
        # col can be an integer from 0 to 4
        if row == None:
            row = self.currentRow
        if col == None:
            col = self.currentCol

        if not (row == 'top' or row == 'middle' or row == 'bottom'):
            raise ValueError("row can only be 'top', 'middle', or 'bottom'")
        if not (type(col) == int and col >= 0 and col <= 4):
            raise ValueError("col can only be an integer from 0 to 4")
        
        self.parking_lot_data[row][col]['item'] = item

        if returnData:
            return self.parking_lot_data

    def add_pillar(self, row, col):
        if row == None:
            row = self.currentRow
        if col == None:
            col = self.currentCol

        if not (row == 'top' or row == 'middle' or row == 'bottom'):
            raise ValueError("row can only be 'top', 'middle', or 'bottom'")
        if not (type(col) == int and col >= 0 and col <= 4):
            raise ValueError("col can only be an integer from 0 to 4")
        self.pillar_data[row][col] = True

    def get(self):
        return self.parking_lot_data

    def get_pillar(self):
        return self.pillar_data
    
    def setRow(self, row):
        if not (row == 'top' or row == 'middle' or row == 'bottom'):
            raise ValueError("row can only be 'top', 'middle', or 'bottom'")

        self.currentRow = row
    
    def changeCol(self, change):
        if not (type(change) == int and change >= 1 and change <= 4):
            raise ValueError("change can only be an integer")
        self.currentCol += change
        if not (type(self.currentCol) == int and self.currentCol >= 0 and self.currentCol <= 4):
            raise ValueError("The value of change has produced an invalid column number")
    
    def setCol(self, col):
        if not (type(col) == int and col >= 0 and col <= 4):
            raise ValueError("col can only be an integer from 0 to 4")
        self.currentCol = col
        
