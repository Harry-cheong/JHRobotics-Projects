#!/usr/bin/env python3
# pyright: reportMissingImports=false
from ev3dev2.motor import OUTPUT_A, OUTPUT_B,OUTPUT_C, OUTPUT_D, MoveTank, MoveSteering, LargeMotor, MediumMotor, SpeedPercent
from ev3dev2.led import Leds
from ev3dev2.button import Button
from ev3dev2.sensor.lego import ColorSensor, UltrasonicSensor
from ev3dev2.sensor import INPUT_1, INPUT_2, INPUT_3, INPUT_4
from ev3dev2.sound import Sound
import time
import threading
from importlib.machinery import SourceFileLoader

Navigation = SourceFileLoader('Navigation', '/home/robot/N_R_C_2_0_2_1/Modules/Navigation').load_module()
Polling = SourceFileLoader('Polling', '/home/robot/N_R_C_2_0_2_1/Modules/Polling').load_module()
Memory = SourceFileLoader('Memory', '/home/robot/N_R_C_2_0_2_1/Modules/Memory').load_module()
Storage = SourceFileLoader('car_storage', '/home/robot/N_R_C_2_0_2_1/Modules/car_storage').load_module()

# Instantiate Brick
leds = Leds()
btn = Button()
spk = Sound()

# Instantiate Sensors
left_ls = ColorSensor(INPUT_2)
right_ls = ColorSensor(INPUT_3)

lls_Ref_betwline = 30
rls_Ref_betwline = 30

# Instantiate Motors
lm = LargeMotor(OUTPUT_B)
rm = LargeMotor(OUTPUT_C)

steering = MoveSteering(OUTPUT_B, OUTPUT_C)
tank = MoveTank(OUTPUT_B, OUTPUT_C)

# Threading
m_lock = threading.Lock()

# Min/Max Reflective Value
minRef = 0
maxRef = 50

# Initialize instances
ctrl = Navigation.Navigate(m_lock, minRef, maxRef, lls_betw_line =  lls_Ref_betwline, rls_betw_line = rls_Ref_betwline) 
mem = Memory.Memory()
store = Storage.Storage(mem, tank)
poll = Polling.Poll(m_lock, minRef, maxRef, ctrl.rm, ctrl.lm, mem, 40.0, 25.0, 18.0, 5.0, False, False, 70, ctrl, store)


'''
# Start
leds.set_color('LEFT', 'RED')
leds.set_color('RIGHT', 'RED')
while not btn.enter:
    pass
'''

# Start
ctrl.runpid(0.1, 0, 1.1 ,30, right_light_sensor = False, follow_right_edge = False)
poll.start_inters_poll(right_light_sensor = True)
# poll.start_us_poll()

freq = {}

rerun = False
while True:
    k = threading.active_count()

    print(threading.enumerate())
    if poll.turning:
        print('attempted turning')
        poll.inters_stop()
        ctrl.stop_pid()
        
        if poll.slot_item == "car" and ((poll.pillar_right == True and store.check_vacancy([1, 2, 3, 4])) or (poll.pillar_right == False and store.check_vacancy([3, 4, 5, 6])) or poll.pillar_right == None):
            ctrl.turn(turn_right = poll.turn_right)
            # collect car
            ctrl.catch_line(20, turn_right = not poll.turn_right)
        if poll.slot_item == "vacant":
            eject_car = False
            print(poll.pillar_right)
            if poll.pillar_right == None:
                eject_car = store.find_car(colour=poll.slot_color, left_side = True, right_side = True)
            else:
                eject_car = store.find_car(colour=poll.slot_color, left_side = poll.pillar_right, right_side = not poll.pillar_right)
            print(eject_car)
            if eject_car:
                ctrl.turn(turn_right = poll.turn_right)
                store.eject_car(50)
                ctrl.catch_line(20, turn_right = not poll.turn_right)

        poll.turn_right  = None
        poll.turning = False
        ctrl.runpid(0.1, 0, 1.1 ,30, right_light_sensor = False, follow_right_edge = False)
        time.sleep(1.0)
        poll.start_inters_poll(right_light_sensor = True)
    try:
        freq[k] += 1
    except:
        freq[k] = 0
    if btn.up or poll.intersection == 4:
        ctrl.stop_pid()
        poll.inters_stop()
        print(freq)
        break
